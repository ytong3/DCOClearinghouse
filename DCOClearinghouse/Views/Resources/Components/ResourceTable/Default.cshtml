@model PaginatedList<DCOClearinghouse.Models.Resource>

@{
    int rowNumber = (int)ViewData["startIndex"];
}

@functions
{
    string GetHostDomain(string urlString)
    {
        if (urlString == null)
            return null;
        try
        {
            Uri uri = new Uri(urlString);
            return "("+uri?.Host+")";
        }
        catch (UriFormatException)
        {
            return null;
        }
    }

    string GetAgo(DateTime? resourceDateTime)
    {
        if (resourceDateTime == null)
            return "";

        var diff = DateTime.UtcNow.Subtract(resourceDateTime.Value);

        var result = $"{diff.Minutes} minutes ago";

        if (diff.Hours > 0)
        {
            result = $"{diff.Hours} hours ago";
        }

        if (diff.Days > 0)
        {
            result = diff.Days == 1 ? $"{diff.Days} day {result}" : $"{diff.Days} days {result}";
        }

        return result;
    }
}

<div id="table-container">
<table class="table table-striped">
    <thead>
    <tr>
        <th>

        </th>
        <th>
            
        </th>
    </tr>
    </thead>
    <tbody>
    @foreach (var resource in Model)
    {
        <tr>
            <td>
                @{ rowNumber++;} <span>@rowNumber.</span>
            </td>
            <td>
                <a href="@resource.Link" target="_blank">@Html.DisplayFor(_ => resource.Subject)</a>
                <span class="small">@GetHostDomain(resource.Link)</span>
                <br/>
                <div class="small">
                    @GetAgo(resource.CreateDate ?? null)  | @Html.ActionLink("Details", "Details", "Resources", new { @ID = resource.ID }) | @Html.ActionLink("Bad link", "ReportBadLink", "Resources", new { @ID = resource.ID })
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>
</div>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="@ViewContext.RouteData.Values["Action"]"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex-1)"
   asp-route-searchTypeId="@ViewData["CurrentSearchType"]"
   asp-route-searchStatus="@ViewData["CurrentStatus"]"
   class="btn btn-default @prevDisabled"
>
    Preivous
</a>

<a asp-action="@ViewContext.RouteData.Values["Action"]"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex+1)"
   asp-route-searchTypeId="@ViewData["CurrentSearchType"]"
   asp-route-searchStatus="@ViewData["CurrentStatus"]"
   class="btn btn-default @nextDisabled"
>
    Next
</a>